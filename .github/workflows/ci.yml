name: CI

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

jobs:
  quality:
    runs-on: ubuntu-latest
    timeout-minutes: 10

    strategy:
      matrix:
        node-version: [18.x, 20.x]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run linting
        run: npm run lint

      - name: Check formatting
        run: npm run format:check

      - name: Run tests
        run: npm run test:coverage

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage/lcov.info
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false

  security:
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run security audit
        run: npm audit --audit-level=moderate

      - name: Check for vulnerabilities
        run: npx audit-ci --moderate

  build:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: [quality, security]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Test application startup
        run: |
          timeout 10s npm start || code=$?
          if [[ $code -ne 124 && $code -ne 0 ]]; then
            echo "Application failed to start"
            exit 1
          fi
          echo "Application started successfully"

  docker:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: [quality, security]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Build Docker image
        run: |
          docker build -t intent-engine:test .
          echo "✅ Docker build successful"

      - name: Test container startup
        run: |
          # Start container in background
          docker run -d --name test-container -p 3002:3002 intent-engine:test
          
          # Wait for container to be ready (up to 30 seconds)
          echo "Waiting for container to start..."
          for i in {1..30}; do
            if docker exec test-container curl -f http://localhost:3002/health >/dev/null 2>&1; then
              echo "✅ Container is healthy"
              break
            fi
            if [ $i -eq 30 ]; then
              echo "❌ Container failed to become healthy"
              docker logs test-container
              exit 1
            fi
            sleep 1
          done

      - name: Test API endpoints
        run: |
          # Test health endpoint
          docker exec test-container curl -f http://localhost:3002/health
          
          # Test Swagger docs endpoint
          docker exec test-container curl -f http://localhost:3002/api-docs/ >/dev/null
          
          echo "✅ API endpoints responding correctly"

      - name: Basic security scan
        run: |
          # Simple security check - scan for common vulnerabilities
          docker run --rm -v /var/run/docker.sock:/var/run/docker.sock \
            -v $(pwd):/tmp aquasec/trivy:latest image \
            --exit-code 0 --severity HIGH,CRITICAL \
            --format table intent-engine:test
          echo "✅ Basic security scan completed"

      - name: Cleanup
        if: always()
        run: |
          docker stop test-container || true
          docker rm test-container || true
          docker rmi intent-engine:test || true
