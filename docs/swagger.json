{
  "openapi": "3.0.0",
  "info": {
    "title": "Intent Engine API",
    "version": "1.0.0",
    "description": "A Node.js Express API server for intent-based DeFi operations, providing optimal swap execution and bulk token pricing with intelligent fallback logic.",
    "contact": {
      "name": "API Support",
      "url": "https://github.com/all-weather-protocol/intent-engine"
    },
    "license": {
      "name": "MIT",
      "url": "https://opensource.org/licenses/MIT"
    }
  },
  "servers": [
    {
      "url": "https://intent-engine.fly.dev",
      "description": "Production server"
    }
  ],
  "components": {
    "schemas": {
      "EthereumAddress": {
        "type": "string",
        "pattern": "^0x[a-fA-F0-9]{40}$",
        "example": "0x2eCBC6f229feD06044CDb0dD772437a30190CD50",
        "description": "Valid Ethereum address"
      },
      "ChainId": {
        "type": "integer",
        "enum": [1, 10, 137, 42161, 8453],
        "example": 1,
        "description": "Supported blockchain network ID"
      },
      "ErrorResponse": {
        "type": "object",
        "required": ["success", "error"],
        "properties": {
          "success": {
            "type": "boolean",
            "example": false
          },
          "error": {
            "type": "object",
            "required": ["code", "message"],
            "properties": {
              "code": {
                "type": "string",
                "example": "INVALID_INPUT"
              },
              "message": {
                "type": "string",
                "example": "Invalid userAddress: must be a valid Ethereum address"
              },
              "details": {
                "type": "object",
                "additionalProperties": true
              }
            }
          }
        }
      },
      "IntentRequest": {
        "type": "object",
        "required": ["userAddress", "chainId", "params"],
        "properties": {
          "userAddress": {
            "$ref": "#/components/schemas/EthereumAddress"
          },
          "chainId": {
            "$ref": "#/components/schemas/ChainId"
          },
          "params": {
            "type": "object",
            "additionalProperties": true
          }
        }
      },
      "DustZapParams": {
        "type": "object",
        "required": ["toTokenAddress", "toTokenDecimals"],
        "properties": {
          "dustThreshold": {
            "type": "number",
            "minimum": 0,
            "example": 5,
            "description": "Minimum USD value threshold for dust tokens"
          },
          "targetToken": {
            "type": "string",
            "enum": ["ETH"],
            "example": "ETH",
            "description": "Target token symbol (currently only ETH supported)"
          },
          "referralAddress": {
            "$ref": "#/components/schemas/EthereumAddress",
            "description": "Optional referral address for fee sharing"
          },
          "toTokenAddress": {
            "$ref": "#/components/schemas/EthereumAddress",
            "description": "Target token contract address"
          },
          "toTokenDecimals": {
            "type": "integer",
            "minimum": 1,
            "maximum": 18,
            "example": 18,
            "description": "Number of decimals for target token"
          },
          "slippage": {
            "type": "number",
            "minimum": 0,
            "maximum": 100,
            "example": 1,
            "description": "Slippage tolerance percentage"
          }
        }
      },
      "DustZapResponse": {
        "type": "object",
        "required": [
          "success",
          "intentType",
          "mode",
          "intentId",
          "streamUrl",
          "metadata"
        ],
        "properties": {
          "success": {
            "type": "boolean",
            "example": true
          },
          "intentType": {
            "type": "string",
            "example": "dustZap"
          },
          "mode": {
            "type": "string",
            "example": "streaming"
          },
          "intentId": {
            "type": "string",
            "example": "dustZap_1640995200000_abc123_def456789abcdef0"
          },
          "streamUrl": {
            "type": "string",
            "example": "/api/dustzap/dustZap_1640995200000_abc123_def456789abcdef0/stream"
          },
          "metadata": {
            "type": "object",
            "properties": {
              "totalTokens": {
                "type": "integer",
                "example": 5
              },
              "estimatedDuration": {
                "type": "string",
                "example": "5-10 seconds"
              },
              "streamingEnabled": {
                "type": "boolean",
                "example": true
              }
            }
          }
        }
      },
      "SwapQuoteRequest": {
        "type": "object",
        "required": [
          "chainId",
          "fromTokenAddress",
          "fromTokenDecimals",
          "toTokenAddress",
          "toTokenDecimals",
          "amount",
          "fromAddress",
          "slippage",
          "to_token_price"
        ],
        "properties": {
          "chainId": {
            "$ref": "#/components/schemas/ChainId"
          },
          "fromTokenAddress": {
            "$ref": "#/components/schemas/EthereumAddress"
          },
          "fromTokenDecimals": {
            "type": "integer",
            "minimum": 0,
            "maximum": 18,
            "example": 18
          },
          "toTokenAddress": {
            "$ref": "#/components/schemas/EthereumAddress"
          },
          "toTokenDecimals": {
            "type": "integer",
            "minimum": 0,
            "maximum": 18,
            "example": 6
          },
          "amount": {
            "type": "string",
            "example": "1000000000000000000",
            "description": "Amount to swap in smallest token unit (wei)"
          },
          "fromAddress": {
            "$ref": "#/components/schemas/EthereumAddress"
          },
          "slippage": {
            "type": "number",
            "minimum": 0,
            "maximum": 100,
            "example": 1
          },
          "to_token_price": {
            "type": "number",
            "example": 1000,
            "description": "Destination token price in USD"
          },
          "eth_price": {
            "type": "number",
            "example": 3000,
            "description": "ETH price in USD (optional, default: 1000)"
          }
        }
      },
      "SwapQuoteResponse": {
        "type": "object",
        "required": [
          "approve_to",
          "to",
          "toAmount",
          "minToAmount",
          "data",
          "gasCostUSD",
          "gas",
          "custom_slippage",
          "toUsd",
          "provider"
        ],
        "properties": {
          "approve_to": {
            "$ref": "#/components/schemas/EthereumAddress"
          },
          "to": {
            "$ref": "#/components/schemas/EthereumAddress"
          },
          "toAmount": {
            "type": "string",
            "example": "1000000000"
          },
          "minToAmount": {
            "type": "string",
            "example": "990000000"
          },
          "data": {
            "type": "string",
            "example": "0x..."
          },
          "gasCostUSD": {
            "type": "number",
            "example": 25.5
          },
          "gas": {
            "type": "string",
            "example": "200000"
          },
          "custom_slippage": {
            "type": "number",
            "example": 100
          },
          "toUsd": {
            "type": "number",
            "example": 974.5
          },
          "provider": {
            "type": "string",
            "enum": ["1inch", "paraswap", "0x"],
            "example": "1inch"
          },
          "allQuotes": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "provider": {
                  "type": "string"
                },
                "toUsd": {
                  "type": "number"
                },
                "gasCostUSD": {
                  "type": "number"
                },
                "toAmount": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "TokenPricesResponse": {
        "type": "object",
        "required": [
          "results",
          "errors",
          "totalRequested",
          "fromCache",
          "fromProviders",
          "failed",
          "timestamp"
        ],
        "properties": {
          "results": {
            "type": "object",
            "additionalProperties": {
              "type": "object",
              "properties": {
                "success": {
                  "type": "boolean",
                  "example": true
                },
                "price": {
                  "type": "number",
                  "example": 45000.5
                },
                "symbol": {
                  "type": "string",
                  "example": "btc"
                },
                "provider": {
                  "type": "string",
                  "example": "coinmarketcap"
                },
                "timestamp": {
                  "type": "string",
                  "format": "date-time"
                },
                "fromCache": {
                  "type": "boolean",
                  "example": false
                },
                "metadata": {
                  "type": "object",
                  "properties": {
                    "tokenId": {
                      "type": "string"
                    },
                    "marketCap": {
                      "type": "number"
                    },
                    "volume24h": {
                      "type": "number"
                    },
                    "percentChange24h": {
                      "type": "number"
                    }
                  }
                }
              }
            }
          },
          "errors": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "totalRequested": {
            "type": "integer"
          },
          "fromCache": {
            "type": "integer"
          },
          "fromProviders": {
            "type": "integer"
          },
          "failed": {
            "type": "integer"
          },
          "timestamp": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "HealthResponse": {
        "type": "object",
        "required": ["status", "timestamp"],
        "properties": {
          "status": {
            "type": "string",
            "enum": ["healthy"],
            "example": "healthy"
          },
          "timestamp": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "VaultInfo": {
        "type": "object",
        "required": [
          "id",
          "name",
          "description",
          "riskLevel",
          "expectedAPR",
          "supportedChains",
          "totalTVL",
          "status"
        ],
        "properties": {
          "id": {
            "type": "string",
            "example": "stablecoin-vault"
          },
          "name": {
            "type": "string",
            "example": "Stablecoin Vault"
          },
          "description": {
            "type": "string",
            "example": "Low-risk yield generation with stablecoins"
          },
          "riskLevel": {
            "type": "string",
            "enum": ["low", "medium", "medium-high", "high"],
            "example": "low"
          },
          "expectedAPR": {
            "type": "object",
            "properties": {
              "min": {
                "type": "number",
                "example": 5
              },
              "max": {
                "type": "number",
                "example": 15
              }
            }
          },
          "supportedChains": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ChainId"
            }
          },
          "totalTVL": {
            "type": "number",
            "example": 0
          },
          "status": {
            "type": "string",
            "enum": ["active", "inactive", "deprecated"],
            "example": "active"
          }
        }
      }
    },
    "responses": {
      "BadRequest": {
        "description": "Bad request - Invalid input parameters",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          }
        }
      },
      "NotFound": {
        "description": "Resource not found",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          }
        }
      },
      "InternalServerError": {
        "description": "Internal server error",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          }
        }
      },
      "ServiceUnavailable": {
        "description": "Service unavailable - External service error",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          }
        }
      }
    }
  },
  "tags": [
    {
      "name": "Intents",
      "description": "Intent-based DeFi operations"
    },
    {
      "name": "Swaps",
      "description": "DEX aggregator swap operations"
    },
    {
      "name": "Prices",
      "description": "Token price data with fallback providers"
    },
    {
      "name": "Vaults",
      "description": "Vault strategy information"
    },
    {
      "name": "Health",
      "description": "API health checks"
    }
  ],
  "paths": {
    "/api/v1/intents/dustZap": {
      "post": {
        "tags": ["Intents"],
        "summary": "Execute DustZap intent111",
        "description": "Converts dust tokens (small value tokens) to ETH using optimal swap routes across multiple DEX aggregators. Returns a streaming response for real-time processing updates.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/IntentRequest"
                  },
                  {
                    "type": "object",
                    "properties": {
                      "params": {
                        "$ref": "#/components/schemas/DustZapParams"
                      }
                    }
                  }
                ]
              },
              "examples": {
                "dustZapRequest": {
                  "summary": "Basic DustZap request",
                  "value": {
                    "userAddress": "0x2eCBC6f229feD06044CDb0dD772437a30190CD50",
                    "chainId": 1,
                    "params": {
                      "dustThreshold": 5,
                      "targetToken": "ETH",
                      "toTokenAddress": "0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee",
                      "toTokenDecimals": 18,
                      "slippage": 1,
                      "referralAddress": "0x1234567890123456789012345678901234567890",
                      "dustTokens": [
                        {
                          "address": "0x1217bfe6c773eec6cc4a38b5dc45b92292b6e189",
                          "symbol": "OpenUSDT",
                          "amount": 0.943473,
                          "price": 0.99985,
                          "decimals": 6,
                          "raw_amount_hex_str": "0xe6571"
                        },
                        {
                          "address": "0x526728dbc96689597f85ae4cd716d4f7fccbae9d",
                          "symbol": "msUSD",
                          "amount": 0.040852155251341185,
                          "price": 0.9962465895840099,
                          "decimals": 18,
                          "raw_amount_hex_str": "0x9122d19a10b77f"
                        }
                      ]
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "DustZap intent initiated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DustZapResponse"
                },
                "examples": {
                  "dustZapResponse": {
                    "summary": "Successful DustZap response",
                    "value": {
                      "success": true,
                      "intentType": "dustZap",
                      "mode": "streaming",
                      "intentId": "dustZap_1640995200000_abc123_def456789abcdef0",
                      "streamUrl": "/api/dustzap/dustZap_1640995200000_abc123_def456789abcdef0/stream",
                      "metadata": {
                        "totalTokens": 5,
                        "estimatedDuration": "5-10 seconds",
                        "streamingEnabled": true
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          },
          "503": {
            "$ref": "#/components/responses/ServiceUnavailable"
          }
        }
      }
    },
    "/api/dustzap/{intentId}/stream": {
      "get": {
        "tags": ["Intents"],
        "summary": "Stream DustZap execution progress",
        "description": "Server-Sent Events (SSE) endpoint that streams real-time progress updates for DustZap intent execution. Provides token-by-token processing updates, transaction data, and completion status.",
        "parameters": [
          {
            "in": "path",
            "name": "intentId",
            "required": true,
            "schema": {
              "type": "string",
              "pattern": "^dustZap_\\d+_[a-fA-F0-9]{6}_[a-fA-F0-9]{16}$",
              "example": "dustZap_1640995200000_abc123_def456789abcdef0"
            },
            "description": "Intent ID returned from DustZap intent initiation"
          }
        ],
        "responses": {
          "200": {
            "description": "SSE stream with real-time processing updates",
            "headers": {
              "Content-Type": {
                "schema": {
                  "type": "string",
                  "example": "text/event-stream"
                }
              },
              "Cache-Control": {
                "schema": {
                  "type": "string",
                  "example": "no-cache"
                }
              },
              "Connection": {
                "schema": {
                  "type": "string",
                  "example": "keep-alive"
                }
              }
            },
            "content": {
              "text/event-stream": {
                "schema": {
                  "type": "string",
                  "description": "SSE events with JSON data"
                },
                "examples": {
                  "connectedEvent": {
                    "summary": "Initial connection event",
                    "value": "data: {\"type\":\"connected\",\"intentId\":\"dustZap_123\",\"totalTokens\":5,\"timestamp\":\"2024-01-01T00:00:00.000Z\"}\n"
                  },
                  "tokenReadyEvent": {
                    "summary": "Token processing completed",
                    "value": "data: {\"type\":\"token_ready\",\"tokenIndex\":0,\"tokenSymbol\":\"TOKEN1\",\"transactions\":[...],\"progress\":0.2,\"timestamp\":\"2024-01-01T00:00:00.000Z\"}\n"
                  },
                  "completeEvent": {
                    "summary": "All processing completed",
                    "value": "data: {\"type\":\"complete\",\"transactions\":[...],\"metadata\":{\"totalTokens\":5,\"processedTokens\":5},\"timestamp\":\"2024-01-01T00:00:00.000Z\"}\n"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid intent ID format",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Intent execution context not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "410": {
            "description": "Intent ID has expired",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/api/v1/intents": {
      "get": {
        "tags": ["Intents"],
        "summary": "Get supported intent types",
        "description": "Returns a list of all supported intent types and their configurations",
        "responses": {
          "200": {
            "description": "List of supported intents retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": ["success", "intents", "total"],
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "intents": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "example": ["dustZap"]
                    },
                    "total": {
                      "type": "integer",
                      "example": 1
                    }
                  }
                }
              }
            }
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/api/v1/intents/health": {
      "get": {
        "tags": ["Health"],
        "summary": "Intent service health check",
        "description": "Performs health checks on intent service and all dependent services including swap service, price service, and rebalance backend",
        "responses": {
          "200": {
            "description": "All services are healthy",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": ["success", "status", "services", "timestamp"],
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "status": {
                      "type": "string",
                      "enum": ["healthy", "degraded"],
                      "example": "healthy"
                    },
                    "services": {
                      "type": "object",
                      "properties": {
                        "intentService": {
                          "type": "boolean",
                          "example": true
                        },
                        "swapService": {
                          "type": "boolean",
                          "example": true
                        },
                        "priceService": {
                          "type": "boolean",
                          "example": true
                        },
                        "rebalanceBackend": {
                          "type": "boolean",
                          "example": true
                        }
                      }
                    },
                    "timestamp": {
                      "type": "string",
                      "format": "date-time",
                      "example": "2024-01-01T00:00:00.000Z"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Health check failed due to internal error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": false
                    },
                    "status": {
                      "type": "string",
                      "example": "error"
                    },
                    "message": {
                      "type": "string",
                      "example": "Health check failed"
                    }
                  }
                }
              }
            }
          },
          "503": {
            "description": "One or more services are unhealthy",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": false
                    },
                    "status": {
                      "type": "string",
                      "example": "degraded"
                    },
                    "services": {
                      "type": "object",
                      "additionalProperties": {
                        "type": "boolean"
                      }
                    },
                    "timestamp": {
                      "type": "string",
                      "format": "date-time"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/swap/quote": {
      "get": {
        "tags": ["Swaps"],
        "summary": "Get optimal swap quote",
        "description": "Automatically finds the second-best swap route across multiple DEX aggregators (1inch, Paraswap, 0x Protocol) considering both output value and gas costs. Uses intelligent fallback logic and returns comprehensive quote data.",
        "parameters": [
          {
            "in": "query",
            "name": "chainId",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ChainId"
            },
            "description": "Blockchain network ID"
          },
          {
            "in": "query",
            "name": "fromTokenAddress",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/EthereumAddress"
            },
            "description": "Source token contract address"
          },
          {
            "in": "query",
            "name": "fromTokenDecimals",
            "required": true,
            "schema": {
              "type": "integer",
              "minimum": 0,
              "maximum": 18,
              "example": 18
            },
            "description": "Source token decimals"
          },
          {
            "in": "query",
            "name": "toTokenAddress",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/EthereumAddress"
            },
            "description": "Destination token contract address"
          },
          {
            "in": "query",
            "name": "toTokenDecimals",
            "required": true,
            "schema": {
              "type": "integer",
              "minimum": 0,
              "maximum": 18,
              "example": 6
            },
            "description": "Destination token decimals"
          },
          {
            "in": "query",
            "name": "amount",
            "required": true,
            "schema": {
              "type": "string",
              "example": "1000000000000000000"
            },
            "description": "Amount to swap in smallest token unit (wei)"
          },
          {
            "in": "query",
            "name": "fromAddress",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/EthereumAddress"
            },
            "description": "User's wallet address"
          },
          {
            "in": "query",
            "name": "slippage",
            "required": true,
            "schema": {
              "type": "number",
              "minimum": 0,
              "maximum": 100,
              "example": 1
            },
            "description": "Slippage tolerance percentage"
          },
          {
            "in": "query",
            "name": "to_token_price",
            "required": true,
            "schema": {
              "type": "number",
              "example": 1000
            },
            "description": "Destination token price in USD"
          },
          {
            "in": "query",
            "name": "eth_price",
            "required": false,
            "schema": {
              "type": "number",
              "example": 3000,
              "default": 1000
            },
            "description": "ETH price in USD for gas cost calculations"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful swap quote retrieved",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SwapQuoteResponse"
                },
                "examples": {
                  "swapQuote": {
                    "summary": "Successful swap quote",
                    "value": {
                      "approve_to": "0x1111111254EEB25477B68fb85Ed929f73A960582",
                      "to": "0x1111111254EEB25477B68fb85Ed929f73A960582",
                      "toAmount": "1000000000",
                      "minToAmount": "990000000",
                      "data": "0x0502b1c5...",
                      "gasCostUSD": 25.5,
                      "gas": "200000",
                      "custom_slippage": 100,
                      "toUsd": 974.5,
                      "provider": "1inch",
                      "allQuotes": [
                        {
                          "provider": "1inch",
                          "toUsd": 974.5,
                          "gasCostUSD": 25.5,
                          "toAmount": "1000000000"
                        },
                        {
                          "provider": "paraswap",
                          "toUsd": 970.2,
                          "gasCostUSD": 29.8,
                          "toAmount": "995000000"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/swap/providers": {
      "get": {
        "tags": ["Swaps"],
        "summary": "Get supported DEX providers",
        "description": "Returns a list of all supported DEX aggregator providers available for swap operations",
        "responses": {
          "200": {
            "description": "List of supported providers retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": ["providers"],
                  "properties": {
                    "providers": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "example": ["1inch", "paraswap", "0x"]
                    }
                  }
                },
                "examples": {
                  "providersList": {
                    "summary": "Supported DEX providers",
                    "value": {
                      "providers": ["1inch", "paraswap", "0x"]
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/tokens/prices": {
      "get": {
        "tags": ["Prices"],
        "summary": "Get bulk token prices",
        "description": "Get prices for multiple tokens with intelligent fallback across price providers (CoinMarketCap, CoinGecko). Includes comprehensive caching, rate limiting, and metadata.",
        "parameters": [
          {
            "in": "query",
            "name": "tokens",
            "required": true,
            "schema": {
              "type": "string",
              "example": "btc,eth,usdc"
            },
            "description": "Comma-separated list of token symbols"
          },
          {
            "in": "query",
            "name": "useCache",
            "required": false,
            "schema": {
              "type": "string",
              "enum": ["true", "false"],
              "default": "true"
            },
            "description": "Whether to use cached prices"
          },
          {
            "in": "query",
            "name": "timeout",
            "required": false,
            "schema": {
              "type": "string",
              "example": "5000",
              "default": "5000"
            },
            "description": "Request timeout in milliseconds"
          }
        ],
        "responses": {
          "200": {
            "description": "Token prices retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TokenPricesResponse"
                },
                "examples": {
                  "bulkPrices": {
                    "summary": "Successful bulk price response",
                    "value": {
                      "results": {
                        "btc": {
                          "success": true,
                          "price": 45000.5,
                          "symbol": "btc",
                          "provider": "coinmarketcap",
                          "timestamp": "2024-01-01T00:00:00.000Z",
                          "fromCache": false,
                          "metadata": {
                            "tokenId": "1",
                            "marketCap": 850000000000,
                            "volume24h": 25000000000,
                            "percentChange24h": 2.5
                          }
                        },
                        "eth": {
                          "success": true,
                          "price": 2800.25,
                          "symbol": "eth",
                          "provider": "coinmarketcap",
                          "timestamp": "2024-01-01T00:00:00.000Z",
                          "fromCache": false
                        }
                      },
                      "errors": [],
                      "totalRequested": 2,
                      "fromCache": 0,
                      "fromProviders": 2,
                      "failed": 0,
                      "timestamp": "2024-01-01T00:00:00.000Z"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/tokens/price/{symbol}": {
      "get": {
        "tags": ["Prices"],
        "summary": "Get single token price",
        "description": "Get price for a single token with intelligent fallback across price providers",
        "parameters": [
          {
            "in": "path",
            "name": "symbol",
            "required": true,
            "schema": {
              "type": "string",
              "example": "btc"
            },
            "description": "Token symbol (e.g. btc, eth, usdc)"
          },
          {
            "in": "query",
            "name": "useCache",
            "required": false,
            "schema": {
              "type": "string",
              "enum": ["true", "false"],
              "default": "true"
            },
            "description": "Whether to use cached prices"
          },
          {
            "in": "query",
            "name": "timeout",
            "required": false,
            "schema": {
              "type": "string",
              "example": "5000",
              "default": "5000"
            },
            "description": "Request timeout in milliseconds"
          }
        ],
        "responses": {
          "200": {
            "description": "Token price retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "price": {
                      "type": "number",
                      "example": 45000.5
                    },
                    "symbol": {
                      "type": "string",
                      "example": "btc"
                    },
                    "provider": {
                      "type": "string",
                      "example": "coinmarketcap"
                    },
                    "timestamp": {
                      "type": "string",
                      "format": "date-time"
                    },
                    "fromCache": {
                      "type": "boolean",
                      "example": false
                    },
                    "metadata": {
                      "type": "object",
                      "properties": {
                        "tokenId": {
                          "type": "string"
                        },
                        "marketCap": {
                          "type": "number"
                        },
                        "volume24h": {
                          "type": "number"
                        },
                        "percentChange24h": {
                          "type": "number"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        }
      }
    },
    "/tokens/providers": {
      "get": {
        "tags": ["Prices"],
        "summary": "Get price provider status",
        "description": "Returns detailed information about supported price providers, their status, and current rate limiting state",
        "responses": {
          "200": {
            "description": "Price provider information retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": ["providers", "status", "rateLimits"],
                  "properties": {
                    "providers": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "example": ["coinmarketcap", "coingecko"]
                    },
                    "status": {
                      "type": "object",
                      "additionalProperties": {
                        "type": "object",
                        "properties": {
                          "name": {
                            "type": "string"
                          },
                          "available": {
                            "type": "boolean"
                          },
                          "apiKeysCount": {
                            "type": "integer"
                          },
                          "currentKeyIndex": {
                            "type": "integer"
                          },
                          "requiresApiKey": {
                            "type": "boolean"
                          }
                        }
                      }
                    },
                    "rateLimits": {
                      "type": "object",
                      "additionalProperties": {
                        "type": "object",
                        "properties": {
                          "tokens": {
                            "type": "integer"
                          },
                          "capacity": {
                            "type": "integer"
                          },
                          "rate": {
                            "type": "number"
                          }
                        }
                      }
                    }
                  }
                },
                "examples": {
                  "providerStatus": {
                    "summary": "Price provider status",
                    "value": {
                      "providers": ["coinmarketcap", "coingecko"],
                      "status": {
                        "coinmarketcap": {
                          "name": "coinmarketcap",
                          "available": true,
                          "apiKeysCount": 2,
                          "currentKeyIndex": 0
                        },
                        "coingecko": {
                          "name": "coingecko",
                          "available": true,
                          "requiresApiKey": false
                        }
                      },
                      "rateLimits": {
                        "coinmarketcap": {
                          "tokens": 25,
                          "capacity": 30,
                          "rate": 0.5
                        },
                        "coingecko": {
                          "tokens": 95,
                          "capacity": 100,
                          "rate": 1.67
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/health": {
      "get": {
        "tags": ["Health"],
        "summary": "Basic health check",
        "description": "Simple health check endpoint to verify API is running",
        "responses": {
          "200": {
            "description": "API is healthy and operational",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HealthResponse"
                },
                "examples": {
                  "healthCheck": {
                    "summary": "Healthy response",
                    "value": {
                      "status": "healthy",
                      "timestamp": "2024-01-01T00:00:00.000Z"
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}
